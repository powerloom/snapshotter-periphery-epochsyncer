version: '3.8'

services:
  epochsyncer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: epochsyncer
    environment:
      # Source RPC Configuration
      - SOURCE_RPC_URL
      - SOURCE_RPC_RATE_LIMIT
      - SOURCE_RPC_MAX_RETRIES
      - SOURCE_RPC_TIMEOUT
      - SOURCE_RPC_POLLING_INTERVAL
      # Powerloom RPC Configuration
      - POWERLOOM_RPC_URL
      - POWERLOOM_RPC_RATE_LIMIT
      - POWERLOOM_RPC_RETRY
      - POWERLOOM_RPC_TIMEOUT
      - POWERLOOM_RPC_POLLING_INTERVAL
      # Redis Configuration
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_DB
      - REDIS_PASSWORD
      - REDIS_SSL
      - REDIS_CLUSTER_MODE
      # Contract Configuration
      - PROTOCOL_STATE_CONTRACT_ADDRESS
      - DATA_MARKET_CONTRACT_ADDRESS
      # Application Configuration
      - POLLING_INTERVAL
      # Logging Configuration
      - LOG_LEVEL
      - LOG_FILE_PATH
      - LOG_ROTATION
      - LOG_RETENTION
      - WRITE_LOGS_TO_FILES
      - DEBUG_MODE
      # Additional Configuration
      - NAMESPACE
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs:/app/logs
    depends_on:
      - rate-limiter
      - redis
  redis:
    image: "redis:7-alpine"
    command: redis-server --appendonly yes --port ${REDIS_PORT:-6379}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -h ${REDIS_HOST:-localhost} -p ${REDIS_PORT:-6379} ping | grep -q PONG && ! redis-cli -h ${REDIS_HOST:-localhost} -p ${REDIS_PORT:-6379} info persistence | grep -q 'loading:1'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure
    volumes:
      - ./redis_data:/data
    # Add optional password and memory configurations
    environment:
      - REDIS_PASSWORD
      - REDIS_HOST
    profiles:
      - local
      - test

  rate-limiter:
    image: ${RATE_LIMITER_IMAGE:-ghcr.io/powerloom/rate-limiter:dockerify}
    environment:
      - DEFAULT_RATE_LIMIT=${DEFAULT_RATE_LIMIT:-1000}
    command: poetry run uvicorn app:app --host 0.0.0.0 --port ${RATE_LIMITER_PORT:-8000}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${RATE_LIMITER_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - local
      - test
    env_file:
      - .env